// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum IssueType {
  BUG
  TASK
  FEATURE
}

enum IssueStatus {
  BACKLOG
  SELECTED
  INPROGRESS
  DONE
}

enum IssuePriority {
  HIGHEST
  HIGH
  MEDIUM
  LOW
  LOWEST
}

enum ProjectCategory {
  SOFTWARE
  MARKETING
  BUSINESS
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  hash      String
  avatarUrl String?  @db.VarChar(2000)
  createdAt DateTime @default(now())

  // Relationships
  issues    Issue[]
  project   Project?  @relation(fields: [projectId], references: [id])
  projectId Int?

  // Table mapping
  @@map("users")
  @@unique([email])
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  issueId   Int

  // Relationships
  issue Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@unique([id])
  // Table mapping
  @@map("comments")
}

model Issue {
  id              Int           @id @default(autoincrement())
  title           String
  type            IssueType
  status          IssueStatus
  priority        IssuePriority
  description     String?
  descriptionText String?
  estimate        Int?
  timeSpent       Int?
  timeRemaining   Int?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  reporterId      Int?
  projectId       Int
  // userIds         Int[]

  // Relationships
  project  Project   @relation(fields: [projectId], references: [id])
  comments Comment[]
  users    User[]

  @@unique([id])
  // Table mapping
  @@map("issues")
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String
  url         String?
  description String?
  category    ProjectCategory
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  // Relationships
  issues Issue[]
  users  User[]

  @@unique([id])
  // Table mapping
  @@map("projects")
}
